// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorServicesAndWashApp.Data;

#nullable disable

namespace MotorServicesAndWashApp.Migrations
{
    [DbContext(typeof(MotorServiceDbContext))]
    [Migration("20230820203033_Add new Tb")]
    partial class AddnewTb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Cities", b =>
                {
                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<string>("CitiesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictsId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostCode")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CitiesId");

                    b.HasIndex("DistrictsId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.DayOfWeeksModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CalendarDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DayOfWeeks");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.DaysOfCloseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ServiceCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("dayOfWeeksModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("dayOfWeeksModelId");

                    b.ToTable("DaysOfClose");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Districts", b =>
                {
                    b.Property<int>("DistrictsId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictsName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Districts_Name");

                    b.Property<int?>("ProvincesId")
                        .HasColumnType("int");

                    b.HasKey("DistrictsId");

                    b.HasIndex("ProvincesId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Provinces", b =>
                {
                    b.Property<int>("ProvincesId")
                        .HasColumnType("int");

                    b.Property<string>("ProvincesName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Provinces_Name");

                    b.HasKey("ProvincesId");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceCenter", b =>
                {
                    b.Property<int>("ServiceCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceCenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CitiesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HotlineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvincesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceCenterCloseTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("CloseTime");

                    b.Property<string>("ServiceCenterName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceCenterOpenTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("OpenTime");

                    b.Property<int?>("VehicleTypesVehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("ServiceCenterId");

                    b.HasIndex("CitiesId");

                    b.HasIndex("DistrictsId");

                    b.HasIndex("ProvincesId");

                    b.HasIndex("VehicleTypesVehicleTypeId");

                    b.ToTable("ServiceCenter");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceCenterLoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceCenterId")
                        .HasColumnType("int");

                    b.Property<string>("SystemUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemUserPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCenterId");

                    b.ToTable("ServiceCenterLogin");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceVehicles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ServiceCenterId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypesVehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCenterId");

                    b.HasIndex("VehicleTypesVehicleTypeId");

                    b.ToTable("ServiceVehicles");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.UserDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CitiesId")
                        .HasColumnType("int");

                    b.Property<short>("OptCode")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("OptCodeSendDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("firstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salt")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.UserSesstion", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sesston")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("SesstonCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SesstonEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SessionId");

                    b.ToTable("UserSesstions");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.VehicleTypes", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleTypeId"), 1L, 1);

                    b.Property<string>("VehicleTypesName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Cities", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.Districts", "Districts")
                        .WithMany("Cities")
                        .HasForeignKey("DistrictsId");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.DaysOfCloseModel", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.ServiceCenter", "ServiceCenter")
                        .WithMany("daysOfCloseModels")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("MotorServicesAndWashApp.Models.Domain.DayOfWeeksModel", "dayOfWeeksModel")
                        .WithMany("DaysOfCloseModel")
                        .HasForeignKey("dayOfWeeksModelId");

                    b.Navigation("ServiceCenter");

                    b.Navigation("dayOfWeeksModel");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Districts", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.Provinces", "Provinces")
                        .WithMany("Districts")
                        .HasForeignKey("ProvincesId");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceCenter", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.Cities", "Cities")
                        .WithMany("serviceCenters")
                        .HasForeignKey("CitiesId");

                    b.HasOne("MotorServicesAndWashApp.Models.Domain.Districts", "Districts")
                        .WithMany("serviceCenters")
                        .HasForeignKey("DistrictsId");

                    b.HasOne("MotorServicesAndWashApp.Models.Domain.Provinces", "Provinces")
                        .WithMany("serviceCenters")
                        .HasForeignKey("ProvincesId");

                    b.HasOne("MotorServicesAndWashApp.Models.Domain.VehicleTypes", null)
                        .WithMany("serviceCenters")
                        .HasForeignKey("VehicleTypesVehicleTypeId");

                    b.Navigation("Cities");

                    b.Navigation("Districts");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceCenterLoginModel", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.ServiceCenter", "ServiceCenter")
                        .WithMany("ServiceCenterLoginModel")
                        .HasForeignKey("ServiceCenterId");

                    b.Navigation("ServiceCenter");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceVehicles", b =>
                {
                    b.HasOne("MotorServicesAndWashApp.Models.Domain.ServiceCenter", "serviceCenter")
                        .WithMany("ServiceVehicles")
                        .HasForeignKey("ServiceCenterId");

                    b.HasOne("MotorServicesAndWashApp.Models.Domain.VehicleTypes", "VehicleTypes")
                        .WithMany()
                        .HasForeignKey("VehicleTypesVehicleTypeId");

                    b.Navigation("VehicleTypes");

                    b.Navigation("serviceCenter");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Cities", b =>
                {
                    b.Navigation("serviceCenters");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.DayOfWeeksModel", b =>
                {
                    b.Navigation("DaysOfCloseModel");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Districts", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("serviceCenters");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.Provinces", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("serviceCenters");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.ServiceCenter", b =>
                {
                    b.Navigation("ServiceCenterLoginModel");

                    b.Navigation("ServiceVehicles");

                    b.Navigation("daysOfCloseModels");
                });

            modelBuilder.Entity("MotorServicesAndWashApp.Models.Domain.VehicleTypes", b =>
                {
                    b.Navigation("serviceCenters");
                });
#pragma warning restore 612, 618
        }
    }
}
